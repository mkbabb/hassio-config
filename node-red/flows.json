[{"id":"4f871e90.29a61","type":"tab","label":"Cache States","disabled":false,"info":""},{"id":"98c27ff6.35533","type":"tab","label":"Doors Status","disabled":false,"info":""},{"id":"85bb4851.f21a8","type":"tab","label":"Rise 'n Shine","disabled":false,"info":""},{"id":"63f81812256dc223","type":"tab","label":"Flow 1","disabled":false,"info":"","env":[]},{"id":"f97ca533678b9087","type":"tab","label":"Battery Status","disabled":false,"info":"","env":[]},{"id":"5b7e5465e939c9c7","type":"tab","label":"Thermostat Time of Use","disabled":false,"info":"","env":[]},{"id":"9da257dda9a8d74d","type":"tab","label":"Flow 2","disabled":false,"info":"","env":[]},{"id":"dc6c7d82059d5798","type":"subflow","name":"Cache States Subflow","info":"","category":"","in":[{"x":580,"y":320,"wires":[{"id":"a90dea0430911c94"}]}],"out":[{"x":1780,"y":360,"wires":[{"id":"ebf6877b37feb3aa","port":0}]},{"x":1780,"y":280,"wires":[{"id":"dbb68a3c87ae3047","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"79544c2b.6ccc64","type":"server","name":"Home Assistant","version":4,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":30,"areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m"},{"id":"eed41b44.0c507","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#1bbfff","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey"}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","lockMenu":"false","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"8c5c5002.bcdab","type":"server","name":"hassio","version":4,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":30,"areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m"},{"id":"cf1a8b1e.5bfb5","type":"server","name":"hassio","version":4,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":30,"areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m"},{"id":"214b25c1.8d3f0a","type":"server","name":"hassio","version":4,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":30,"areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m"},{"id":"cc2ae6f9.bf95f","type":"server","name":"hassio","version":4,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":30,"areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m"},{"id":"11b1a6e9.59fe11","type":"server","name":"Home Assistant","version":4,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":30,"areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m"},{"id":"0f0bd6e74f18a17d","type":"chronos-config","name":"Home","timezone":"","sunPositions":[]},{"id":"cf063e98218d5dfc","type":"change","z":"dc6c7d82059d5798","name":"get cached States","rules":[{"t":"set","p":"payload","pt":"msg","to":"cachedStates","tot":"flow"}],"action":"","property":"","from":"","to":"","reg":false,"x":1290,"y":200,"wires":[["61f2bd3b2e2bfcf5","e8b5531b0e9e17e5"]]},{"id":"61f2bd3b2e2bfcf5","type":"split","z":"dc6c7d82059d5798","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":1430,"y":200,"wires":[["ebf6877b37feb3aa"]]},{"id":"c9ec3624ae88840c","type":"function","z":"dc6c7d82059d5798","name":"cache house state","func":"const blacklistedEntities = [\"son_of_toast\"];\nconst setIfExists = (to, from, key) => {\n    const value = from[key];\n    if (value != undefined) {\n        to[key] = value;\n        return true;\n    }\n    else {\n        return false;\n    }\n};\nconst normalizeIncludes = (s1, s2) => {\n    return s1.toLowerCase().includes(s2.toLowerCase());\n};\n//@ts-expect-error\nconst message = msg;\nconst entities = message.payload.filter((e) => {\n    const { entity_id, state } = e;\n    const whitelisted = blacklistedEntities.find((value) => normalizeIncludes(entity_id, value)) ==\n        undefined;\n    return whitelisted && state !== \"unavailable\";\n});\nconst lightAttributes = [\"brightness\"];\nconst fanAttributes = [\"percentage\"];\nconst domains = [\"light\", \"switch\", \"fan\", \"climate\", \"lock\", \"cover\"];\n/**\n * Filters a list of attributes based on valid state attributes of a given entity.\n * These are the states that we'll save when caching.\n *\n * @param domain entity domain.\n * @param service entity service.\n * @param attributes entity attributes to cache.\n */\nconst filterAttributes = function (domain, service, attributes) {\n    let data = {};\n    switch (domain) {\n        case \"light\": {\n            const colorMode = attributes[\"color_mode\"];\n            if (attributes[colorMode] != undefined) {\n                data[colorMode] = attributes[colorMode];\n            }\n            lightAttributes.forEach((x) => setIfExists(data, attributes, x));\n        }\n        case \"fan\": {\n            fanAttributes.forEach((x) => setIfExists(data, attributes, x));\n        }\n    }\n    return data;\n};\n/**\n * Maps an input entity's domain to an appropriate service for\n * later caching.\n *\n * light -> turn_[on, off], for example.\n *\n * @param entity input hass entity.\n * @param domain domain thereof.\n */\nconst mapDomainToService = function (entity, domain) {\n    switch (domain) {\n        case \"switch\":\n        case \"light\":\n        case \"fan\": {\n            return `turn_${entity.state}`;\n        }\n        case \"media_player\": {\n            switch (entity.state) {\n                case \"standby\":\n                case \"off\":\n                    return \"turn_off\";\n                case \"on\":\n                    return \"turn_on\";\n                case \"playing\":\n                    return \"media_play\";\n                case \"paused\":\n                    return \"media_pause\";\n                default:\n                    return \"turn_off\";\n            }\n        }\n        case \"lock\": {\n            switch (entity.state) {\n                case \"locked\":\n                    return \"lock\";\n                case \"unlocked\":\n                    return \"unlock\";\n            }\n        }\n        case \"cover\": {\n            switch (entity.state) {\n                case \"open\":\n                    return \"open_cover\";\n                case \"closed\":\n                    return \"close_cover\";\n            }\n        }\n        default: {\n            return \"turn_off\";\n        }\n    }\n};\n// create the cached state object that will be saved to the global flow.\nconst cachedStates = entities.map((e) => {\n    const domain = e.entity_id.split(\".\")[0];\n    const service = mapDomainToService(e, domain);\n    const serviceCall = {\n        domain: domain,\n        service: service,\n        data: Object.assign({ entity_id: e.entity_id, state: e.state }, filterAttributes(domain, service, e.attributes))\n    };\n    return serviceCall;\n});\n// We only cache the states we need to - currently active entities, or states.\nconst activeStates = cachedStates.filter((serviceCall) => {\n    const { domain } = serviceCall;\n    const { state } = serviceCall.data;\n    if (!domains.includes(domain)) {\n        return false;\n    }\n    switch (domain) {\n        case \"switch\":\n        case \"light\": {\n            return state === \"on\";\n        }\n        case \"lock\": {\n            return state === \"unlocked\";\n        }\n        case \"cover\": {\n            return state === \"open\";\n        }\n        case \"climate\": {\n            return state !== \"off\";\n        }\n    }\n    return true;\n});\ncachedStates.forEach((x) => {\n    delete x.data.state;\n});\n// Creates a set of away states that we'll entry once our away condition is met within hass.\n// For example, we turn off all of the cached lights and switches, and turn on all the fans to low.\nconst awayPayload = activeStates\n    .map((serviceCall) => {\n        const { domain } = serviceCall;\n        const { entity_id } = serviceCall.data;\n        const payload = { domain, data: { entity_id } };\n        switch (domain) {\n            case \"switch\":\n            case \"light\": {\n                payload[\"service\"] = \"turn_off\";\n                return payload;\n            }\n            case \"fan\": {\n                payload[\"service\"] = \"turn_on\";\n                payload.data[\"percentage\"] = 100 / 3;\n                return payload;\n            }\n            case \"climate\": {\n                payload[\"service\"] = \"set_preset_mode\";\n                payload.data[\"preset_mode\"] = \"away\";\n                return payload;\n            }\n            case \"lock\": {\n                payload[\"service\"] = \"lock\";\n                return payload;\n            }\n            case \"cover\": {\n                payload[\"service\"] = \"close_cover\";\n                return payload;\n            }\n        }\n    })\n    .flat(); // we may need to support multiple payload returns per state.\n//@ts-ignore\nflow.set(\"cachedStates\", cachedStates);\n// the next node will execute this payload.\nmessage.payload = awayPayload;\n//@ts-ignore\nreturn message;\n","outputs":1,"noerr":17,"initialize":"","finalize":"","libs":[],"x":1290,"y":480,"wires":[["981b7b282c3db8ab"]]},{"id":"981b7b282c3db8ab","type":"split","z":"dc6c7d82059d5798","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":1430,"y":480,"wires":[["dbb68a3c87ae3047"]]},{"id":"dbb68a3c87ae3047","type":"api-call-service","z":"dc6c7d82059d5798","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":true,"domain":"","service":"","areaId":[],"deviceId":[],"entityId":[],"data":"","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":1550,"y":480,"wires":[[]]},{"id":"ebf6877b37feb3aa","type":"api-call-service","z":"dc6c7d82059d5798","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":true,"domain":"","service":"","areaId":[],"deviceId":[],"entityId":[],"data":"","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":1550,"y":200,"wires":[[]]},{"id":"e8b5531b0e9e17e5","type":"change","z":"dc6c7d82059d5798","name":"clear cache","rules":[{"t":"set","p":"cachedStates","pt":"flow","to":"{}","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1430,"y":320,"wires":[[]]},{"id":"f4b5067f0f2021c8","type":"switch","z":"dc6c7d82059d5798","name":"","property":"cache","propertyType":"msg","rules":[{"t":"eq","v":"off","vt":"str"},{"t":"eq","v":"on","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":930,"y":320,"wires":[["cf063e98218d5dfc"],["c9ec3624ae88840c"]]},{"id":"b0af6cd43ec1b234","type":"change","z":"dc6c7d82059d5798","name":"","rules":[{"t":"set","p":"cache","pt":"flow","to":"msg.cache","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":960,"y":260,"wires":[[]]},{"id":"a90dea0430911c94","type":"switch","z":"dc6c7d82059d5798","name":"","property":"cache","propertyType":"flow","rules":[{"t":"neq","v":"msg.cache","vt":"str"},{"t":"eq","v":"msg.cache","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":730,"y":320,"wires":[["b0af6cd43ec1b234","f4b5067f0f2021c8"],["f494e211af04e8d3"]]},{"id":"f494e211af04e8d3","type":"debug","z":"dc6c7d82059d5798","name":"debug 7","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":940,"y":440,"wires":[]},{"id":"aacec64e.aa1d48","type":"change","z":"4f871e90.29a61","name":"get cached States","rules":[{"t":"set","p":"payload","pt":"msg","to":"cachedStates","tot":"flow"}],"action":"","property":"","from":"","to":"","reg":false,"x":1310,"y":620,"wires":[["ff4ac2d6.2746f","f4a2e2a9daa158a7"]]},{"id":"ff4ac2d6.2746f","type":"split","z":"4f871e90.29a61","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":1450,"y":620,"wires":[["1669ac1752753aef"]]},{"id":"14303710.68aa19","type":"function","z":"4f871e90.29a61","name":"cache house state","func":"const blacklistedEntities = [\"son_of_toast\"];\nconst setIfExists = (to, from, key) => {\n    const value = from[key];\n    if (value != undefined) {\n        to[key] = value;\n        return true;\n    }\n    else {\n        return false;\n    }\n};\nconst normalizeIncludes = (s1, s2) => {\n    return s1.toLowerCase().includes(s2.toLowerCase());\n};\n//@ts-expect-error\nconst message = msg;\nconst entities = message.payload.filter((e) => {\n    const { entity_id, state } = e;\n    const whitelisted = blacklistedEntities.find((value) => normalizeIncludes(entity_id, value)) ==\n        undefined;\n    return whitelisted && state !== \"unavailable\";\n});\nconst lightAttributes = [\"brightness\"];\nconst fanAttributes = [\"percentage\"];\nconst domains = [\"light\", \"switch\", \"fan\", \"climate\", \"lock\", \"cover\"];\n/**\n * Filters a list of attributes based on valid state attributes of a given entity.\n * These are the states that we'll save when caching.\n *\n * @param domain entity domain.\n * @param service entity service.\n * @param attributes entity attributes to cache.\n */\nconst filterAttributes = function (domain, service, attributes) {\n    let data = {};\n    switch (domain) {\n        case \"light\": {\n            const colorMode = attributes[\"color_mode\"];\n            if (attributes[colorMode] != undefined) {\n                data[colorMode] = attributes[colorMode];\n            }\n            lightAttributes.forEach((x) => setIfExists(data, attributes, x));\n        }\n        case \"fan\": {\n            fanAttributes.forEach((x) => setIfExists(data, attributes, x));\n        }\n    }\n    return data;\n};\n/**\n * Maps an input entity's domain to an appropriate service for\n * later caching.\n *\n * light -> turn_[on, off], for example.\n *\n * @param entity input hass entity.\n * @param domain domain thereof.\n */\nconst mapDomainToService = function (entity, domain) {\n    switch (domain) {\n        case \"switch\":\n        case \"light\":\n        case \"fan\": {\n            return `turn_${entity.state}`;\n        }\n        case \"media_player\": {\n            switch (entity.state) {\n                case \"standby\":\n                case \"off\":\n                    return \"turn_off\";\n                case \"on\":\n                    return \"turn_on\";\n                case \"playing\":\n                    return \"media_play\";\n                case \"paused\":\n                    return \"media_pause\";\n                default:\n                    return \"turn_off\";\n            }\n        }\n        case \"lock\": {\n            switch (entity.state) {\n                case \"locked\":\n                    return \"lock\";\n                case \"unlocked\":\n                    return \"unlock\";\n            }\n        }\n        case \"cover\": {\n            switch (entity.state) {\n                case \"open\":\n                    return \"open_cover\";\n                case \"closed\":\n                    return \"close_cover\";\n            }\n        }\n        default: {\n            return \"turn_off\";\n        }\n    }\n};\n// create the cached state object that will be saved to the global flow.\nconst cachedStates = entities.map((e) => {\n    const domain = e.entity_id.split(\".\")[0];\n    const service = mapDomainToService(e, domain);\n    const serviceCall = {\n        domain: domain,\n        service: service,\n        data: Object.assign({ entity_id: e.entity_id, state: e.state }, filterAttributes(domain, service, e.attributes))\n    };\n    return serviceCall;\n});\n// We only cache the states we need to - currently active entities, or states.\nconst activeStates = cachedStates.filter((serviceCall) => {\n    const { domain } = serviceCall;\n    const { state } = serviceCall.data;\n    if (!domains.includes(domain)) {\n        return false;\n    }\n    switch (domain) {\n        case \"switch\":\n        case \"light\": {\n            return state === \"on\";\n        }\n        case \"lock\": {\n            return state === \"unlocked\";\n        }\n        case \"cover\": {\n            return state === \"open\";\n        }\n        case \"climate\": {\n            return state !== \"off\";\n        }\n    }\n    return true;\n});\ncachedStates.forEach((x) => {\n    delete x.data.state;\n});\n// Creates a set of away states that we'll entry once our away condition is met within hass.\n// For example, we turn off all of the cached lights and switches, and turn on all the fans to low.\nconst awayPayload = activeStates\n    .map((serviceCall) => {\n        const { domain } = serviceCall;\n        const { entity_id } = serviceCall.data;\n        const payload = { domain, data: { entity_id } };\n        switch (domain) {\n            case \"switch\":\n            case \"light\": {\n                payload[\"service\"] = \"turn_off\";\n                return payload;\n            }\n            case \"fan\": {\n                payload[\"service\"] = \"turn_on\";\n                payload.data[\"percentage\"] = 100 / 3;\n                return payload;\n            }\n            case \"climate\": {\n                payload[\"service\"] = \"set_preset_mode\";\n                payload.data[\"preset_mode\"] = \"away\";\n                return payload;\n            }\n            case \"lock\": {\n                payload[\"service\"] = \"lock\";\n                return payload;\n            }\n            case \"cover\": {\n                payload[\"service\"] = \"close_cover\";\n                return payload;\n            }\n        }\n    })\n    .flat(); // we may need to support multiple payload returns per state.\n//@ts-ignore\nflow.set(\"cachedStates\", cachedStates);\n// the next node will execute this payload.\nmessage.payload = awayPayload;\n//@ts-ignore\nreturn message;\n","outputs":1,"noerr":17,"initialize":"","finalize":"","libs":[],"x":1310,"y":900,"wires":[["903042a6.670338"]]},{"id":"2ed2b2d3.0c552e","type":"ha-get-entities","z":"4f871e90.29a61","name":"get devices","server":"79544c2b.6ccc64","version":0,"rules":[{"property":"entity_id","logic":"is","value":"(light|switch|fan|climate|lock)\\..*","valueType":"re"}],"output_type":"array","output_empty_results":false,"output_location_type":"msg","output_location":"payload","output_results_count":1,"x":1050,"y":900,"wires":[["14303710.68aa19"]]},{"id":"903042a6.670338","type":"split","z":"4f871e90.29a61","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":1450,"y":900,"wires":[["9e3ef48904e2d996"]]},{"id":"5d075e2e.1f3bd8","type":"api-call-service","z":"4f871e90.29a61","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":false,"domain":"input_boolean","service":"turn_on","areaId":[],"deviceId":[],"entityId":["input_boolean.home_away"],"data":"","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","output_location":"","output_location_type":"none","x":760,"y":900,"wires":[["2ed2b2d3.0c552e"]]},{"id":"17890fed.b998b8","type":"api-call-service","z":"4f871e90.29a61","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":false,"domain":"input_boolean","service":"turn_off","areaId":[],"deviceId":[],"entityId":["input_boolean.home_away"],"data":"","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","output_location":"","output_location_type":"none","x":760,"y":620,"wires":[["aacec64e.aa1d48"]]},{"id":"b66b3e87.d1cee","type":"server-state-changed","z":"4f871e90.29a61","name":"home status","server":"79544c2b.6ccc64","version":4,"exposeToHomeAssistant":false,"haConfig":[{"property":"name","value":""},{"property":"icon","value":""}],"entityidfilter":"person.mike","entityidfiltertype":"exact","outputinitially":false,"state_type":"str","haltifstate":"Home","halt_if_type":"str","halt_if_compare":"is","outputs":2,"output_only_on_state_change":true,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"eventData"},{"property":"topic","propertyType":"msg","value":"","valueType":"triggerId"}],"x":250,"y":620,"wires":[["17890fed.b998b8"],["bd2c897a.02d8f"]]},{"id":"9fb8d2b1.bc6ae8","type":"ha-wait-until","z":"4f871e90.29a61","name":"","server":"79544c2b.6ccc64","version":1,"outputs":2,"entityId":"","entityIdFilterType":"exact","property":"state","comparator":"is","value":"home","valueType":"str","timeout":"10","timeoutType":"num","timeoutUnits":"seconds","entityLocation":"","entityLocationType":"none","checkCurrentState":true,"blockInputOverrides":false,"x":540,"y":900,"wires":[[],["5d075e2e.1f3bd8"]]},{"id":"bd2c897a.02d8f","type":"change","z":"4f871e90.29a61","name":"set entity_id","rules":[{"t":"set","p":"payload","pt":"msg","to":"{}","tot":"json"},{"t":"set","p":"payload.entity_id","pt":"msg","to":"data.entity_id","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":410,"y":900,"wires":[["9fb8d2b1.bc6ae8"]]},{"id":"25fc65fef014b0bf","type":"ha-get-entities","z":"4f871e90.29a61","name":"get locks","server":"79544c2b.6ccc64","version":0,"rules":[{"property":"entity_id","logic":"is","value":"(lock)\\..*","valueType":"re"}],"output_type":"array","output_empty_results":false,"output_location_type":"msg","output_location":"payload","output_results_count":1,"x":1960,"y":900,"wires":[["52444401d856d55c"]]},{"id":"52444401d856d55c","type":"split","z":"4f871e90.29a61","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":2070,"y":900,"wires":[["50c91c32dc7147ec"]]},{"id":"e22b9fc4179ce238","type":"api-call-service","z":"4f871e90.29a61","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":false,"domain":"lock","service":"lock","areaId":[],"deviceId":[],"entityId":["{{data.entity_id}}"],"data":"","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":2360,"y":900,"wires":[[]]},{"id":"3c5004c3947325ac","type":"ha-get-entities","z":"4f871e90.29a61","name":"get covers","server":"79544c2b.6ccc64","version":0,"rules":[{"property":"entity_id","logic":"is","value":"(cover)\\..*","valueType":"re"}],"output_type":"array","output_empty_results":false,"output_location_type":"msg","output_location":"payload","output_results_count":1,"x":1970,"y":960,"wires":[["c821e3f06fa1b128"]]},{"id":"c821e3f06fa1b128","type":"split","z":"4f871e90.29a61","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":2070,"y":960,"wires":[["dce0556fd0c2fe2e"]]},{"id":"4699931917df78ba","type":"api-call-service","z":"4f871e90.29a61","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":false,"domain":"cover","service":"close_cover","areaId":[],"deviceId":[],"entityId":["{{data.entity_id}}"],"data":"","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":2410,"y":960,"wires":[[]]},{"id":"a24b319e59434d2b","type":"api-call-service","z":"4f871e90.29a61","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":false,"domain":"lock","service":"unlock","areaId":[],"deviceId":[],"entityId":["lock.back_door"],"data":"","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":2110,"y":540,"wires":[[]]},{"id":"e052f903b9b9094c","type":"api-call-service","z":"4f871e90.29a61","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":false,"domain":"cover","service":"open_cover","areaId":[],"deviceId":[],"entityId":["cover.garage_door"],"data":"","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":2120,"y":620,"wires":[[]]},{"id":"89d96167cc9d1f8f","type":"api-current-state","z":"4f871e90.29a61","name":"back door state","server":"79544c2b.6ccc64","version":3,"outputs":2,"halt_if":"locked","halt_if_type":"str","halt_if_compare":"is","entity_id":"lock.back_door","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":0,"forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1970,"y":540,"wires":[["a24b319e59434d2b"],[]]},{"id":"4251ab4f04bf7b53","type":"api-current-state","z":"4f871e90.29a61","name":"cover state","server":"79544c2b.6ccc64","version":3,"outputs":2,"halt_if":"closed","halt_if_type":"str","halt_if_compare":"is","entity_id":"cover.garage_door","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":0,"forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1960,"y":620,"wires":[["e052f903b9b9094c"],[]]},{"id":"50c91c32dc7147ec","type":"api-current-state","z":"4f871e90.29a61","name":"lock state","server":"79544c2b.6ccc64","version":3,"outputs":2,"halt_if":"unlocked","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{payload.entity_id}}","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":0,"forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":2240,"y":900,"wires":[["e22b9fc4179ce238"],[]]},{"id":"dce0556fd0c2fe2e","type":"api-current-state","z":"4f871e90.29a61","name":"cover state","server":"79544c2b.6ccc64","version":3,"outputs":2,"halt_if":"open","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{payload.entity_id}}","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":0,"forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":2250,"y":960,"wires":[["4699931917df78ba"],[]]},{"id":"0f9dffb345b01e5e","type":"api-call-service","z":"4f871e90.29a61","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":false,"domain":"climate","service":"set_preset_mode","areaId":[],"deviceId":[],"entityId":["climate.downstairs","climate.upstairs"],"data":"{\"preset_mode\":\"away\"}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":2010,"y":1020,"wires":[[]]},{"id":"9296a1d5f04943e2","type":"api-call-service","z":"4f871e90.29a61","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":false,"domain":"climate","service":"set_preset_mode","areaId":[],"deviceId":[],"entityId":["climate.downstairs","climate.upstairs"],"data":"{\"preset_mode\":\"home\"}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":2000,"y":460,"wires":[[]]},{"id":"9e3ef48904e2d996","type":"api-call-service","z":"4f871e90.29a61","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":true,"domain":"","service":"","areaId":[],"deviceId":[],"entityId":[],"data":"","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":1570,"y":900,"wires":[["cd037c5535d1e7b9"]]},{"id":"1669ac1752753aef","type":"api-call-service","z":"4f871e90.29a61","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":true,"domain":"","service":"","areaId":[],"deviceId":[],"entityId":[],"data":"","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":1570,"y":620,"wires":[["720cdfdfaab0eb95"]]},{"id":"f4a2e2a9daa158a7","type":"change","z":"4f871e90.29a61","name":"clear cache","rules":[{"t":"set","p":"cachedStates","pt":"flow","to":"{}","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1450,"y":740,"wires":[[]]},{"id":"cd037c5535d1e7b9","type":"link call","z":"4f871e90.29a61","name":"","links":[],"linkType":"static","timeout":"30","x":1750,"y":900,"wires":[["25fc65fef014b0bf","3c5004c3947325ac","0f9dffb345b01e5e"]]},{"id":"720cdfdfaab0eb95","type":"link call","z":"4f871e90.29a61","name":"","links":[],"linkType":"static","timeout":"30","x":1750,"y":620,"wires":[["4251ab4f04bf7b53"]]},{"id":"587d8b4e.0cbfec","type":"api-call-service","z":"98c27ff6.35533","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":false,"domain":"notify","service":"mobile_app_fff","areaId":[],"deviceId":[],"entityId":[],"data":"{\"message\":\"{{ payload }}\"}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"data"}],"queue":"none","x":990,"y":260,"wires":[[]]},{"id":"3c30a8fb.902b6","type":"server-state-changed","z":"98c27ff6.35533","name":"front door state","server":"79544c2b.6ccc64","version":4,"exposeToHomeAssistant":false,"haConfig":[{"property":"name","value":""},{"property":"icon","value":""}],"entityidfilter":"binary_sensor.front_door_open","entityidfiltertype":"exact","outputinitially":false,"state_type":"str","haltifstate":"on","halt_if_type":"str","halt_if_compare":"is","outputs":2,"output_only_on_state_change":false,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"eventData"},{"property":"topic","propertyType":"msg","value":"","valueType":"triggerId"}],"x":100,"y":260,"wires":[["6d00805d.48533"],["6d00805d.48533"]]},{"id":"6d00805d.48533","type":"function","z":"98c27ff6.35533","name":"","func":"//@ts-expect-error\nconst message = msg;\nconst { entity_id: entityId, attributes, state } = message.data.new_state;\nconst trimSensorName = function (sensorName) {\n    return sensorName.replace(new RegExp(\"sensor\", \"i\"), \"\").trim().toLowerCase();\n};\nconst getTimeString = function () {\n    const timeObject = new Date(Date.now());\n    const options = {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        weekday: \"long\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n        hour12: false,\n        timeZone: \"America/New_York\"\n    };\n    const locale = \"en-US\";\n    return timeObject.toLocaleString(locale, options);\n};\nconst doorName = trimSensorName(attributes.friendly_name);\nconst doorState = message.payload === \"on\" ? \"opened\" : \"closed\";\nconst time = getTimeString();\nconst payload = Object.assign({ data: {\n        title: `${doorName} was ${doorState}`,\n        message: `The ${doorName} was ${doorState} at ${time}`\n    } }, { doorName, doorState, time, entity_id: entityId });\nmessage.payload = payload;\n//@ts-ignore\nreturn message;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":440,"y":260,"wires":[["587d8b4e.0cbfec","8cc40c2c.be66d8","23d3878a.c8f9b"]]},{"id":"8cc40c2c.be66d8","type":"api-call-service","z":"98c27ff6.35533","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":false,"domain":"notify","service":"mobile_app_fff2","areaId":[],"deviceId":[],"entityId":[],"data":"{\"message\":\"{{ payload }}\"}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"data"}],"queue":"none","x":1000,"y":320,"wires":[[]]},{"id":"f1339518.4ecb68","type":"server-state-changed","z":"98c27ff6.35533","name":"back door state","server":"79544c2b.6ccc64","version":4,"exposeToHomeAssistant":false,"haConfig":[{"property":"name","value":""},{"property":"icon","value":""}],"entityidfilter":"binary_sensor.back_door_open","entityidfiltertype":"exact","outputinitially":false,"state_type":"str","haltifstate":"on","halt_if_type":"str","halt_if_compare":"is","outputs":2,"output_only_on_state_change":false,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"eventData"},{"property":"topic","propertyType":"msg","value":"","valueType":"triggerId"}],"x":100,"y":320,"wires":[["6d00805d.48533"],["6d00805d.48533"]]},{"id":"981b52aa.9d16b8","type":"ha-wait-until","z":"98c27ff6.35533","name":"","server":"79544c2b.6ccc64","version":1,"outputs":2,"entityId":"","entityIdFilterType":"exact","property":"state","comparator":"is","value":"off","valueType":"str","timeout":"5","timeoutType":"num","timeoutUnits":"minutes","entityLocation":"","entityLocationType":"none","checkCurrentState":true,"blockInputOverrides":false,"x":440,"y":380,"wires":[[],["95041b08.ec95"]]},{"id":"95041b08.ec95","type":"function","z":"98c27ff6.35533","name":"","func":"//@ts-expect-error\nconst message = msg;\n//@ts-expect-error\nconst { doorName, doorState, time: closeTime } = message.payload;\nconst payload = {\n    data: {\n        title: `${doorName} not closed!`,\n        message: `The ${doorName} hasn't been closed since ${closeTime}!`\n    }\n};\nmessage.payload = payload;\n//@ts-ignore\nreturn message;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":440,"wires":[["587d8b4e.0cbfec","8cc40c2c.be66d8"]]},{"id":"23d3878a.c8f9b","type":"switch","z":"98c27ff6.35533","name":"","property":"payload.doorState","propertyType":"msg","rules":[{"t":"eq","v":"opened","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":450,"y":320,"wires":[["981b52aa.9d16b8"]]},{"id":"8ff934f.b665cc8","type":"server-state-changed","z":"85bb4851.f21a8","name":"home status","server":"79544c2b.6ccc64","version":4,"exposeToHomeAssistant":false,"haConfig":[{"property":"name","value":""},{"property":"icon","value":""}],"entityidfilter":"person.mike","entityidfiltertype":"exact","outputinitially":false,"state_type":"str","haltifstate":"home","halt_if_type":"str","halt_if_compare":"is","outputs":2,"output_only_on_state_change":true,"for":"0","forType":"num","forUnits":"minutes","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"eventData"},{"property":"topic","propertyType":"msg","value":"","valueType":"triggerId"}],"x":290,"y":140,"wires":[["8894a9f9.fd4ef"],[]]},{"id":"70750c28.c07b0c","type":"ha-get-entities","z":"85bb4851.f21a8","name":"get lights and switches","server":"79544c2b.6ccc64","version":0,"rules":[{"property":"entity_id","logic":"is","value":"(light|switch)\\..*","valueType":"re"}],"output_type":"array","output_empty_results":false,"output_location_type":"msg","output_location":"payload","output_results_count":1,"x":810,"y":140,"wires":[["8a3a9be3.6a583"]]},{"id":"8a3a9be3.6a583","type":"split","z":"85bb4851.f21a8","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":970,"y":140,"wires":[["3620e144.79ffee"]]},{"id":"8894a9f9.fd4ef","type":"sun events","z":"85bb4851.f21a8","testmode":"N","verbose":"N","topic":"","name":"","x":460,"y":240,"wires":[["82e0676f.eae49"]]},{"id":"82e0676f.eae49","type":"switch","z":"85bb4851.f21a8","name":"is it night?","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"night","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":590,"y":240,"wires":[["70750c28.c07b0c"]]},{"id":"6f763506.c80684","type":"inject","z":"85bb4851.f21a8","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":520,"y":40,"wires":[["70750c28.c07b0c","28c227d.52269d8"]]},{"id":"3620e144.79ffee","type":"debug","z":"85bb4851.f21a8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1070,"y":300,"wires":[]},{"id":"94298148.9679a","type":"api-call-service","z":"85bb4851.f21a8","name":"","server":"79544c2b.6ccc64","version":5,"debugenabled":false,"domain":"notify","service":"mobile_app_fff","areaId":[],"deviceId":[],"entityId":[],"data":"{ \"message\": \"{{payload.data}}\"}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"data"}],"queue":"none","output_location":"payload","output_location_type":"msg","x":1010,"y":40,"wires":[[]]},{"id":"28c227d.52269d8","type":"function","z":"85bb4851.f21a8","name":"","func":"\nconst message = msg;\n\nconst getTimeString = function () {\n    const timeObject = new Date(Date.now());\n    const options = {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        weekday: \"long\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n        hour12: false,\n        timeZone: \"America/New_York\"\n    };\n    const locale = \"en-US\";\n    return timeObject.toLocaleString(locale, options);\n};\n\nconst time = getTimeString();\nconst payload = { data: {\n        title: `You're back!`,\n        message: `Device states restored at ${time}. Welcome home.`}\n    \n};\nmessage.payload = payload;\nreturn message;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":760,"y":80,"wires":[["3620e144.79ffee","94298148.9679a"]]},{"id":"0cc45fa8977ea28b","type":"server-state-changed","z":"63f81812256dc223","name":"home status","server":"79544c2b.6ccc64","version":4,"exposeToHomeAssistant":false,"haConfig":[{"property":"name","value":""},{"property":"icon","value":""}],"entityidfilter":"person.mike","entityidfiltertype":"exact","outputinitially":false,"state_type":"str","haltifstate":"Home","halt_if_type":"str","halt_if_compare":"is","outputs":2,"output_only_on_state_change":true,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"eventData"},{"property":"topic","propertyType":"msg","value":"","valueType":"triggerId"}],"x":130,"y":180,"wires":[[],["3fea48f139d3d558"]]},{"id":"3fea48f139d3d558","type":"change","z":"63f81812256dc223","name":"set entity_id","rules":[{"t":"set","p":"payload","pt":"msg","to":"{}","tot":"json"},{"t":"set","p":"payload.entity_id","pt":"msg","to":"data.entity_id","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":310,"y":440,"wires":[[]]},{"id":"ed72ec182f06d7e0","type":"ha-get-entities","z":"f97ca533678b9087","name":"","server":"79544c2b.6ccc64","version":0,"rules":[{"property":"entity_id","logic":"is","value":"lock.back_door","valueType":"str"},{"property":"entity_id","logic":"is","value":"lock.front_door","valueType":"str"}],"output_type":"array","output_empty_results":false,"output_location_type":"msg","output_location":"payload","output_results_count":1,"x":390,"y":1520,"wires":[["23129490a00d6c54"]]},{"id":"bba47baffb1e39f5","type":"inject","z":"f97ca533678b9087","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":280,"y":1400,"wires":[["ed72ec182f06d7e0"]]},{"id":"23129490a00d6c54","type":"debug","z":"f97ca533678b9087","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":590,"y":1520,"wires":[]},{"id":"701424ab2c042680","type":"inject","z":"5b7e5465e939c9c7","name":"","props":[{"p":"payload"},{"p":"time","v":"","vt":"date"}],"repeat":"3600","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":310,"y":820,"wires":[["ff5c113adf3270b3"]]},{"id":"7db2a23128260fa9","type":"ha-get-entities","z":"5b7e5465e939c9c7","name":"get devices","server":"79544c2b.6ccc64","version":0,"rules":[{"property":"entity_id","logic":"is","value":"(climate)\\..*","valueType":"re"}],"output_type":"array","output_empty_results":false,"output_location_type":"msg","output_location":"payload","output_results_count":1,"x":1350,"y":640,"wires":[["11a78b3f5797f181"]]},{"id":"f1e11729a3e10428","type":"function","z":"5b7e5465e939c9c7","name":"function 1","func":"const now = new Date();\nconst monthDayToDate = (monthDay) => {\n    return new Date(`${monthDay}, ${now.getFullYear()}`);\n};\nconst hourToDate = (hour) => {\n    return new Date(`Jan 1 ${hour}, ${now.getFullYear()}`);\n};\nconst inRange = (date, start, end) => {\n    return date > start && date < end;\n};\nclass DateInterval {\n    constructor(start, end) {\n        this.start = monthDayToDate(start);\n        this.end = monthDayToDate(end);\n    }\n}\nclass ElectricInterval {\n    constructor(start, end, charge) {\n        this.start = hourToDate(start);\n        this.end = hourToDate(end);\n        this.charge = charge;\n    }\n    normalize(date) {\n        const month = date.getMonth();\n        const day = date.getDate();\n        if (this.end.getMonth() === month) {\n            return;\n        }\n        this.start.setMonth(month, day);\n        this.end.setMonth(month, day);\n        if (this.end.getTime() - this.start.getTime() < 0) {\n            this.start.setDate(day - 1);\n        }\n    }\n    inRange(date) {\n        this.normalize(date);\n        return inRange(date, this.start, this.end);\n    }\n    secondsUntilEnd(date) {\n        this.normalize(date);\n        return (this.end.getTime() - date.getTime()) / 1000;\n    }\n}\nclass Schedule {\n    constructor({ dates, on, off }) {\n        this.dates = dates;\n        this.on = on;\n        this.off = off;\n    }\n    findDateInInterval(date) {\n        const pred = (v) => v.inRange(date);\n        const inDateRange = inRange(date, this.dates.start, this.dates.end);\n        if (inDateRange) {\n            let interval = this.off.find(pred);\n            if (interval !== undefined) {\n                return { status: \"off\", interval };\n            }\n            else {\n                interval = this.on.find(pred);\n                if (interval !== undefined) {\n                    return { status: \"on\", interval };\n                }\n            }\n        }\n        return undefined;\n    }\n}\nconst findDateInSchedules = (date, schedules) => {\n    return schedules\n        .map((v) => v.findDateInInterval(date))\n        .find((v) => v !== undefined);\n};\nconst summer = new Schedule({\n    dates: new DateInterval(\"May 1\", \"Oct 31\"),\n    on: [new ElectricInterval(\"5:00 PM\", \"7:00 PM\", 0.4)],\n    off: [\n        new ElectricInterval(\"6:00 AM\", \"5:00 PM\", 0.08),\n        new ElectricInterval(\"10:00 PM\", \"6:00 AM\", 0.05)\n    ]\n});\nconst winter = new Schedule({\n    dates: new DateInterval(\"Nov 1\", \"April 30\"),\n    on: [new ElectricInterval(\"6:00 AM\", \"8:00 AM\", 0.4)],\n    off: [\n        new ElectricInterval(\"8:00 AM\", \"10:00 PM\", 0.08),\n        new ElectricInterval(\"10:00 PM\", \"6:00 AM\", 0.05)\n    ]\n});\nconst schedules = [summer, winter];\n//@ts-ignore\nconst message = msg;\nconst date = new Date(message.time);\nconst electricInterval = findDateInSchedules(date, schedules);\nif (electricInterval != undefined) {\n    const secondsUntilEnd = electricInterval.interval.secondsUntilEnd(date);\n    date.setSeconds(date.getSeconds() + secondsUntilEnd);\n    message.payload = {\n        cache: electricInterval.status,\n        delay: secondsUntilEnd * 1000,\n        timestamp: date.getTime()\n    };\n}\nelse {\n    message.payload = {\n        cache: \"none\"\n    };\n}\n//@ts-ignore\nreturn message;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":760,"y":820,"wires":[["4181d1d274ce388d"]]},{"id":"72b1d430047f6add","type":"switch","z":"5b7e5465e939c9c7","name":"","property":"payload.cache","propertyType":"msg","rules":[{"t":"eq","v":"on","vt":"str"},{"t":"eq","v":"off","vt":"str"},{"t":"eq","v":"none","vt":"str"}],"checkall":"true","repair":false,"outputs":3,"x":1110,"y":820,"wires":[["1386fbdd9b98aaa2","7db2a23128260fa9"],["1386fbdd9b98aaa2","7db2a23128260fa9"],["1386fbdd9b98aaa2"]]},{"id":"11a78b3f5797f181","type":"subflow:dc6c7d82059d5798","z":"5b7e5465e939c9c7","name":"","x":1520,"y":640,"wires":[[],[]]},{"id":"4181d1d274ce388d","type":"change","z":"5b7e5465e939c9c7","name":"","rules":[{"t":"set","p":"cache","pt":"msg","to":"payload.cache","tot":"msg"},{"t":"set","p":"delay","pt":"msg","to":"payload.delay","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":900,"y":820,"wires":[["72b1d430047f6add","1f6bdb64727c86ce"]]},{"id":"1386fbdd9b98aaa2","type":"debug","z":"5b7e5465e939c9c7","name":"debug 8","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1340,"y":820,"wires":[]},{"id":"1f6bdb64727c86ce","type":"delay","z":"5b7e5465e939c9c7","name":"","pauseType":"delayv","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":540,"y":900,"wires":[["ff5c113adf3270b3"]]},{"id":"ff5c113adf3270b3","type":"delay","z":"5b7e5465e939c9c7","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"allowrate":false,"outputs":1,"x":550,"y":820,"wires":[["f1e11729a3e10428"]]}]
{
  "totalNodes": 516,
  "functionNodes": [
    {
      "id": "5cd5c7a97cbfb2a5",
      "name": "states to actions",
      "func": "\"use strict\";\nconst serviceToActionCall = (call) => {\n    if ((call == null ? void 0 : call.action) != null) {\n        return call;\n    }\n    const serviceCall = call;\n    const out = {\n        ...ser...",
      "z": "dc6c7d82059d5798",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "fd875b9553cf1720",
      "name": "cache house state",
      "func": "\"use strict\";\nfunction getEntityDomain(entityId) {\n    const match = entityId.match(/^(.*)\\..*$/);\n    return match ? match[1] : entityId;\n}\nconst setIfExists = (to, from, key) => {\n    const value = ...",
      "z": "dc6c7d82059d5798",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "420bdf56a9545130",
      "name": "filter hidden entities and domains",
      "func": "// The payload is an array of entities, each entity is of the form (example data):\n/*\n{\n    \"area_id\": null,\n    \"categories\": {},\n    \"config_entry_id\": \"ec5a8dbb37234640aafc133fcf9145d3\",\n    \"devic...",
      "z": "e920ad5e223ac1b7",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "f3f79edb0a0bc587",
      "name": "reconcile entities",
      "func": "// src/get-domain-entities/reconcile.ts\nvar entities = flow.get(\"entities\");\nvar areaEntities = flow.get(\"areaEntities\");\nvar entityToAreaMap = {};\nareaEntities.forEach((areaEntity, index) => {\n    co...",
      "z": "e920ad5e223ac1b7",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "fe549fb394a9227a",
      "name": "filter entities",
      "func": "// src/get-domain-entities/filter-entites.ts\nvar payload = msg.payload;\nvar ESPPRESENCE_RE = /^.*\\.espresense.*/;\nvar entities = payload.filter(\n    (entity) => (\n        // Filter out null states, \"u...",
      "z": "e920ad5e223ac1b7",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "f633b8e8b3205bc1",
      "name": "presence",
      "func": "// src/utils/utils.ts\nfunction getEntityDomain(entityId) {\n    const match = entityId.match(/^(.*)\\..*$/);\n    return match ? match[1] : entityId;\n}\nvar normalizeIncludes = (s1, s2) => {\n    return s1...",
      "z": "173c5faccfb73051",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "f59de909516cb178",
      "name": "get flow info",
      "func": "// src/presence/get-flow-info.ts\nvar message = msg;\nvar data = message.data;\nvar dataEntityId = data.entity_id;\nvar topic = message.topic ?? dataEntityId;\nvar flowInfoKey = `flowInfo.${topic}`;\n\nmsg.d...",
      "z": "173c5faccfb73051",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "627b25edecfe582e",
      "name": "filter blacklisted entities",
      "func": "\"use strict\";\nfunction getEntityDomain(entityId) {\n    const match = entityId.match(/^(.*)\\..*$/);\n    return match ? match[1] : entityId;\n}\nconst normalizeIncludes = (s1, s2) => {\n    return s1.toLow...",
      "z": "b0e3e1c3c40d9540",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "c04368f701cd604d",
      "name": "action node",
      "func": "\"use strict\";\nvar _a;\nconst deepEqual = (a, b) => {\n    if (a === b) {\n        return true;\n    }\n    if (typeof a !== \"object\" || typeof b !== \"object\") {\n        return false;\n    }\n    if (Object.k...",
      "z": "8021f5177f6126d9",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "3f3963cff3716131",
      "name": "push cached states",
      "func": "// src/utils/utils.ts\nvar GLOBAL_CACHED_STATES_KEY = \"cachedStates\";\n\n// src/cache-states/push-cache-states.ts\nvar newStates = msg.payload;\nvar cachedStates = global.get(GLOBAL_CACHED_STATES_KEY) ?? [...",
      "z": "4f871e90.29a61",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "715a229a5e312dca",
      "name": "push cached states",
      "func": "// src/utils/utils.ts\nvar GLOBAL_CACHED_STATES_KEY = \"cachedStates\";\n\n// src/cache-states/push-cache-states.ts\nvar newStates = msg.payload;\nvar cachedStates = global.get(GLOBAL_CACHED_STATES_KEY) ?? [...",
      "z": "4f871e90.29a61",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "08f84c6d37343c7a",
      "name": "filter blacklisted entities",
      "func": "// src/utils/utils.ts\nfunction getEntityDomain(entityId) {\n    const match = entityId.match(/^(.*)\\..*$/);\n    return match ? match[1] : entityId;\n}\nvar normalizeIncludes = (s1, s2) => {\n    return s1...",
      "z": "4f871e90.29a61",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "20d9cf93f238d30f",
      "name": "home status",
      "func": "\"use strict\";\nconst STABLE_PERIOD_MS = 5 * 60 * 1e3;\nconst DEBOUNCE_DELAY_MS = 30 * 1e3;\nconst message = msg;\nconst lastState = flow.get(\"home_status_last_state\") || null;\nconst lastChangeTime = flow....",
      "z": "4f871e90.29a61",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "872a4dcbed026511",
      "name": "create schedule cron",
      "func": "\"use strict\";\nfunction getEntityBasename(entityId) {\n    const match = entityId.match(/^.*\\.(.*)$/);\n    return match ? match[1] : entityId;\n}\nfunction getTimeComponents(time) {\n    let timeParts = ti...",
      "z": "a807a4834abd67fa",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "fcef4072b3d808c5",
      "name": "merge cached states",
      "func": "// src/utils/utils.ts\nvar GLOBAL_CACHED_STATES_KEY = \"cachedStates\";\nfunction getEntityBasename(entityId) {\n    const match = entityId.match(/^.*\\.(.*)$/);\n    return match ? match[1] : entityId;\n}\nva...",
      "z": "a807a4834abd67fa",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "57ba98e05115a206",
      "name": "merge scene cached states",
      "func": "// src/utils/utils.ts\nvar GLOBAL_CACHED_STATES_KEY = \"cachedStates\";\nfunction getEntityBasename(entityId) {\n    const match = entityId.match(/^.*\\.(.*)$/);\n    return match ? match[1] : entityId;\n}\nfu...",
      "z": "a807a4834abd67fa",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "76883f7cb338fb52",
      "name": "create schedule cron",
      "func": "\"use strict\";\nfunction getEntityBasename(entityId) {\n    const match = entityId.match(/^.*\\.(.*)$/);\n    return match ? match[1] : entityId;\n}\nfunction getTimeComponents(time) {\n    let timeParts = ti...",
      "z": "a807a4834abd67fa",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "8707143d8533922c",
      "name": "inside preamble window",
      "func": "\"use strict\";\nfunction getTimeComponents(time2) {\n    let timeParts = time2.split(\":\");\n    let [hours, mins, seconds] = timeParts.concat(Array(3 - timeParts.length).fill(\"00\")).map((x) => parseInt(x)...",
      "z": "a807a4834abd67fa",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "b2b315489cc8d2a7",
      "name": "guest daytime",
      "func": "// src/chronos/guest-daytime.ts\nvar entities = msg.payload;\nvar filteredEntities = entities.filter((entity) => {\n    const floor = entity.floor || [];\n    const areaId = entity.area_id;\n    return flo...",
      "z": "a807a4834abd67fa",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "d22ac4c1c222afd5",
      "name": "cache schedule entity",
      "func": "// src/plants/cache-schedule-entity.ts\nvar weekdaySleepEntityId = \"input_datetime.weekday_sleep\";\nvar weekendSleepEntityId = \"input_datetime.weekend_sleep\";\nvar weekdayWakeEntityId = \"input_datetime.w...",
      "z": "a807a4834abd67fa",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "6bc7f26c9c624e6c",
      "name": "pop schedule entity cache",
      "func": "\"use strict\";\nlet cachedTimes = flow.get(\"cachedTimes\");\nif (cachedTimes == null) {\n    flow.set(\"cachedTimes\", {});\n    cachedTimes = flow.get(\"cachedTimes\");\n}\nconst times = Object.entries(cachedTim...",
      "z": "a807a4834abd67fa",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "8f4c1ad0cad49211",
      "name": "function",
      "func": "const PRECOOL_TIME = 2 * 60 * 60 * 1000;\nconst NOW = new Date();\nconst monthDayToDate = (monthDay) => {\n    return new Date(`${monthDay}, ${NOW.getFullYear()}`);\n};\nconst hourToDate = (hour) => {\n    ...",
      "z": "88965fe6e95d05d9",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "04f8709ebd6588c0",
      "name": "set static state",
      "func": "let staticPlantStates = flow.get(\"staticPlantStates\");\n\nif (staticPlantStates == null) {\n    flow.set(\"staticPlantStates\", {});\n    staticPlantStates = flow.get(\"staticPlantStates\");\n}\n\nconst payload ...",
      "z": "e921812388e8a474",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "8baf517e98f7f1a1",
      "name": "schedule",
      "func": "\"use strict\";\nfunction getEntityBasename(entityId) {\n    const match = entityId.match(/^.*\\.(.*)$/);\n    return match ? match[1] : entityId;\n}\nfunction getTimeComponents(time) {\n    let timeParts = ti...",
      "z": "e921812388e8a474",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "3cbb13d1da946813",
      "name": "filter blacklisted entities",
      "func": "\"use strict\";\nconst normalizeIncludes = (s1, s2) => {\n    return s1.toLowerCase().includes(s2.toLowerCase());\n};\nconst isBlacklisted = (entity_id, blacklisted) => {\n    return blacklisted.some((blackl...",
      "z": "e921812388e8a474",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "2f73425d194d82fa",
      "name": "schedules",
      "func": "\"use strict\";\nconst schedules = [\n    {\n        name: \"plants_global\",\n        entities: [\"(switch|light)\\\\.(.*grow.*)\"],\n        start: \"06:00\",\n        end: \"23:00\",\n        precedence: 1\n    },\n   ...",
      "z": "e921812388e8a474",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "55653f952629f321",
      "name": "function 1",
      "func": "const transformFunc = async (t, { color, brightness_pct }) => {\n    const payload = {\n        rgb_color: color.valueOf(),\n        brightness_pct: brightness_pct.valueOf(),\n    };\n\n    node.send({\n    ...",
      "z": "f5468ca00e94e761",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "9b723d99a73d643f",
      "name": "battery",
      "func": "// src/batteries/battery.ts\nvar LOW_BATTERY_THRESHOLD = 30;\nvar CRITICAL_BATTERY_THRESHOLD = 15;\nvar message = msg;\nvar entities = Array.isArray(message.payload) ? message.payload : [message.payload];...",
      "z": "e05fae85092ccf96",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "e2cb1e6a7e2044f7",
      "name": "get entity attributes id",
      "func": "\"use strict\";\nfunction getEntityBasename(entityId2) {\n    const match = entityId2.match(/^.*\\.(.*)$/);\n    return match ? match[1] : entityId2;\n}\nconst entityId = msg.payload.target.entity_id;\nconst b...",
      "z": "6337f535d7b8e1f2",
      "outputs": 1,
      "noerr": 0
    },
    {
      "id": "ba17a7bee754d74a",
      "name": "create service call",
      "func": "\"use strict\";\nfunction mapRange(value, fromMin, fromMax, toMin, toMax) {\n    return (value - fromMin) * (toMax - toMin) / (fromMax - fromMin) + toMin;\n}\nconst parseFloatIfString = (value) => {\n    ret...",
      "z": "6337f535d7b8e1f2",
      "outputs": 1,
      "noerr": 0
    }
  ],
  "potentialMappings": {
    "f633b8e8b3205bc1": {
      "nodeId": "f633b8e8b3205bc1",
      "nodeName": "presence",
      "possibleFile": "presence.ts",
      "confidence": "medium"
    },
    "9b723d99a73d643f": {
      "nodeId": "9b723d99a73d643f",
      "nodeName": "battery",
      "possibleFile": "battery.ts",
      "confidence": "medium"
    }
  },
  "timestamp": "2025-07-25T21:06:11.249Z"
}